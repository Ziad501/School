// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CreditHours")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("Period")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Capacity = 30,
                            Code = "CS201",
                            CreditHours = 4,
                            Description = "Fundamental data structures and algorithms",
                            EndDate = new DateTime(2025, 10, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6228),
                            Name = "Data Structures",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6217),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Capacity = 30,
                            Code = "CS301",
                            CreditHours = 3,
                            Description = "Advanced algorithm design and analysis",
                            EndDate = new DateTime(2025, 10, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6234),
                            Name = "Analysis of Algorithms",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6233),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Capacity = 30,
                            Code = "CS202",
                            CreditHours = 3,
                            Description = "Relational database design and implementation",
                            EndDate = new DateTime(2025, 10, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6237),
                            Name = "Database Systems",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6236),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000203")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Capacity = 30,
                            Code = "EE101",
                            CreditHours = 4,
                            Description = "Basic circuit theory and analysis",
                            EndDate = new DateTime(2025, 10, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6239),
                            Name = "Circuit Analysis",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6239),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Capacity = 30,
                            Code = "EE201",
                            CreditHours = 3,
                            Description = "Digital systems and logic design principles",
                            EndDate = new DateTime(2025, 10, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6242),
                            Name = "Digital Logic Design",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6242),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            Capacity = 30,
                            Code = "MATH101",
                            CreditHours = 4,
                            Description = "Differential and integral calculus",
                            EndDate = new DateTime(2025, 10, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6245),
                            Name = "Calculus I",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 49, 26, 46, DateTimeKind.Utc).AddTicks(6244)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("HeadOfDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Code = "CS",
                            Description = "",
                            HeadOfDepartmentId = new Guid("00000000-0000-0000-0000-000000000201"),
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Code = "EE",
                            Description = "",
                            HeadOfDepartmentId = new Guid("00000000-0000-0000-0000-000000000202"),
                            Name = "Electrical Engineering"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DepartmentCourse", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCoreRequirement")
                        .HasColumnType("boolean");

                    b.HasKey("DepartmentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("DepartmentCourses");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Id = new Guid("1db8ab4a-841b-4ad8-b9d8-06bf39a11fc6"),
                            IsCoreRequirement = true
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Id = new Guid("32d31eff-3e41-4485-aa1f-02ea49aeb0d9"),
                            IsCoreRequirement = true
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Id = new Guid("89362f88-6990-44f1-849e-0d7cf1d9b7e2"),
                            IsCoreRequirement = true
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000021"),
                            Id = new Guid("21580688-9af0-477a-8ff2-db7b46e17dca"),
                            IsCoreRequirement = true
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000022"),
                            Id = new Guid("9ad734e0-2433-4cc4-838c-240830dc311a"),
                            IsCoreRequirement = false
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000031"),
                            Id = new Guid("d5a2864f-09d7-478d-8c45-e05df612496b"),
                            IsCoreRequirement = true
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000031"),
                            Id = new Guid("5e1c57ad-2d67-4e1f-a071-95db0a91d04c"),
                            IsCoreRequirement = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000101"),
                            Address = "123 Tech Way",
                            DateOfBirth = new DateTime(2000, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "alice.johnson@student.edu",
                            EnrollmentDate = new DateTime(2024, 7, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(3641),
                            FirstName = "Alice",
                            IsActive = true,
                            LastName = "Johnson",
                            Phone = "555-0101"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000102"),
                            Address = "456 Code Lane",
                            DateOfBirth = new DateTime(2001, 3, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "bob.williams@student.edu",
                            EnrollmentDate = new DateTime(2024, 7, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(3646),
                            FirstName = "Bob",
                            IsActive = true,
                            LastName = "Williams",
                            Phone = "555-0102"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000103"),
                            Address = "789 Logic Blvd",
                            DateOfBirth = new DateTime(1999, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Email = "charlie.brown@student.edu",
                            EnrollmentDate = new DateTime(2025, 1, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(3652),
                            FirstName = "Charlie",
                            IsActive = true,
                            LastName = "Brown",
                            Phone = "555-0103"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000104"),
                            Address = "101 Algorithm Ave",
                            DateOfBirth = new DateTime(2002, 1, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "diana.miller@student.edu",
                            EnrollmentDate = new DateTime(2025, 1, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(3655),
                            FirstName = "Diana",
                            IsActive = true,
                            LastName = "Miller",
                            Phone = "555-0104"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000105"),
                            Address = "212 Circuit Cr",
                            DateOfBirth = new DateTime(2000, 7, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Email = "eve.davis@student.edu",
                            EnrollmentDate = new DateTime(2023, 7, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(3657),
                            FirstName = "Eve",
                            IsActive = true,
                            LastName = "Davis",
                            Phone = "555-0105"
                        });
                });

            modelBuilder.Entity("Domain.Entities.StudentCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EnrollmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Enrolled");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30864863-cf8e-4073-a54e-34dad785da73"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000011"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(6667),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000101")
                        },
                        new
                        {
                            Id = new Guid("a98ad2ab-54f3-4cb0-bd3f-ab92dcf5baa7"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000031"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(6672),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000101")
                        },
                        new
                        {
                            Id = new Guid("6471c841-7973-4fc2-b07c-c406afd1c016"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000011"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(6679),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000102")
                        },
                        new
                        {
                            Id = new Guid("219f5997-9b0d-402a-af3e-dc2fcdebc94a"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000012"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(6681),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000102")
                        },
                        new
                        {
                            Id = new Guid("c37deab2-0275-4010-a0cc-5be6a0334c10"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000021"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(6683),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000103")
                        },
                        new
                        {
                            Id = new Guid("e2ceb1fb-9b53-4050-abed-8957e50f599d"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000013"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(6685),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000104")
                        },
                        new
                        {
                            Id = new Guid("50939d5f-2047-4c01-8de3-fafe93d62227"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000022"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(6689),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000105")
                        },
                        new
                        {
                            Id = new Guid("ef51b2aa-3b22-4c8f-bd1c-8cd66b92b392"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000031"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(6690),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000105")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Teacher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000201"),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "john.smith@university.edu",
                            FirstName = "John",
                            HireDate = new DateTime(2025, 7, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(8251),
                            LastName = "Smith",
                            Phone = "555-0201"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000202"),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Email = "sarah.johnson@university.edu",
                            FirstName = "Sarah",
                            HireDate = new DateTime(2025, 7, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(8265),
                            LastName = "Johnson",
                            Phone = "555-0202"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000203"),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "michael.brown@university.edu",
                            FirstName = "Michael",
                            HireDate = new DateTime(2025, 7, 14, 23, 49, 26, 47, DateTimeKind.Utc).AddTicks(8267),
                            LastName = "Brown",
                            Phone = "555-0203"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.StudentCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("DepartmentCourses");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("DepartmentCourses");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
