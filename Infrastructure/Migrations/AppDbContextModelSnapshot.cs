// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CreditHours")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("Period")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Capacity = 30,
                            Code = "CS201",
                            CreditHours = 4,
                            Description = "Fundamental data structures and algorithms",
                            EndDate = new DateTime(2025, 10, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(776),
                            Name = "Data Structures",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(768),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Capacity = 30,
                            Code = "CS301",
                            CreditHours = 3,
                            Description = "Advanced algorithm design and analysis",
                            EndDate = new DateTime(2025, 10, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(782),
                            Name = "Analysis of Algorithms",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(781),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Capacity = 30,
                            Code = "CS202",
                            CreditHours = 3,
                            Description = "Relational database design and implementation",
                            EndDate = new DateTime(2025, 10, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(814),
                            Name = "Database Systems",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(814),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000203")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Capacity = 30,
                            Code = "EE101",
                            CreditHours = 4,
                            Description = "Basic circuit theory and analysis",
                            EndDate = new DateTime(2025, 10, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(817),
                            Name = "Circuit Analysis",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(817),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Capacity = 30,
                            Code = "EE201",
                            CreditHours = 3,
                            Description = "Digital systems and logic design principles",
                            EndDate = new DateTime(2025, 10, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(820),
                            Name = "Digital Logic Design",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(820),
                            TeacherId = new Guid("00000000-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            Capacity = 30,
                            Code = "MATH101",
                            CreditHours = 4,
                            Description = "Differential and integral calculus",
                            EndDate = new DateTime(2025, 10, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(830),
                            Name = "Calculus I",
                            Period = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(830)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("HeadOfDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Code = "CS",
                            Description = "",
                            HeadOfDepartmentId = new Guid("00000000-0000-0000-0000-000000000201"),
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Code = "EE",
                            Description = "",
                            HeadOfDepartmentId = new Guid("00000000-0000-0000-0000-000000000202"),
                            Name = "Electrical Engineering"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DepartmentCourse", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCoreRequirement")
                        .HasColumnType("boolean");

                    b.HasKey("DepartmentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("DepartmentCourses");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Id = new Guid("7ed84231-2814-4e06-ba29-c30073271b6f"),
                            IsCoreRequirement = true
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Id = new Guid("3d4556c7-5eb9-42b3-8ad2-8901c890050c"),
                            IsCoreRequirement = true
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Id = new Guid("cc945e49-8718-4576-8810-530ace87a140"),
                            IsCoreRequirement = true
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000021"),
                            Id = new Guid("17d3c9d1-da1c-4d18-981f-1efddd30f6d4"),
                            IsCoreRequirement = true
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000022"),
                            Id = new Guid("7dc7ffac-7212-4d16-af84-4af5f8e76b68"),
                            IsCoreRequirement = false
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000031"),
                            Id = new Guid("d32a6064-01f5-4704-8d38-f3c85a5c1f69"),
                            IsCoreRequirement = true
                        },
                        new
                        {
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000031"),
                            Id = new Guid("f9cd37ca-1975-4f80-8659-6ba2e6edc256"),
                            IsCoreRequirement = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000101"),
                            Address = "123 Tech Way",
                            DateOfBirth = new DateTime(2000, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "alice.johnson@student.edu",
                            EnrollmentDate = new DateTime(2024, 7, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(9474),
                            FirstName = "Alice",
                            IsActive = true,
                            LastName = "Johnson",
                            Phone = "555-0101"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000102"),
                            Address = "456 Code Lane",
                            DateOfBirth = new DateTime(2001, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "bob.williams@student.edu",
                            EnrollmentDate = new DateTime(2024, 7, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(9479),
                            FirstName = "Bob",
                            IsActive = true,
                            LastName = "Williams",
                            Phone = "555-0102"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000103"),
                            Address = "789 Logic Blvd",
                            DateOfBirth = new DateTime(1999, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Email = "charlie.brown@student.edu",
                            EnrollmentDate = new DateTime(2025, 1, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(9482),
                            FirstName = "Charlie",
                            IsActive = true,
                            LastName = "Brown",
                            Phone = "555-0103"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000104"),
                            Address = "101 Algorithm Ave",
                            DateOfBirth = new DateTime(2002, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "diana.miller@student.edu",
                            EnrollmentDate = new DateTime(2025, 1, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(9484),
                            FirstName = "Diana",
                            IsActive = true,
                            LastName = "Miller",
                            Phone = "555-0104"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000105"),
                            Address = "212 Circuit Cr",
                            DateOfBirth = new DateTime(2000, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Email = "eve.davis@student.edu",
                            EnrollmentDate = new DateTime(2023, 7, 14, 23, 34, 48, 297, DateTimeKind.Utc).AddTicks(9487),
                            FirstName = "Eve",
                            IsActive = true,
                            LastName = "Davis",
                            Phone = "555-0105"
                        });
                });

            modelBuilder.Entity("Domain.Entities.StudentCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EnrollmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Enrolled");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3eb3f1f-94b8-4058-bdcb-34e727d881bd"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000011"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(3086),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000101")
                        },
                        new
                        {
                            Id = new Guid("2dcae727-bd0b-441a-b897-6fb4878a786f"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000031"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(3095),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000101")
                        },
                        new
                        {
                            Id = new Guid("f9731854-94ec-4ca3-a947-f5ef31f74d8f"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000011"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(3098),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000102")
                        },
                        new
                        {
                            Id = new Guid("22af58ab-cb52-49d0-93bf-8a1aa9505f15"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000012"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(3100),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000102")
                        },
                        new
                        {
                            Id = new Guid("2ad9c909-b70f-41cd-861f-17ceac503ce9"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000021"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(3133),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000103")
                        },
                        new
                        {
                            Id = new Guid("2d86cb73-0769-44ab-870e-7a59fb8acd9a"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000013"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(3137),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000104")
                        },
                        new
                        {
                            Id = new Guid("15b2a4aa-45ef-4094-aa0c-831d9134c51d"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000022"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(3139),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000105")
                        },
                        new
                        {
                            Id = new Guid("38352581-6830-43dc-8171-8a17001c8276"),
                            CourseId = new Guid("00000000-0000-0000-0000-000000000031"),
                            EnrollmentDate = new DateTime(2025, 6, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(3141),
                            Grade = "",
                            Status = "Enrolled",
                            StudentId = new Guid("00000000-0000-0000-0000-000000000105")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Teacher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000201"),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "john.smith@university.edu",
                            FirstName = "John",
                            HireDate = new DateTime(2025, 7, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(4632),
                            LastName = "Smith",
                            Phone = "555-0201"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000202"),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Email = "sarah.johnson@university.edu",
                            FirstName = "Sarah",
                            HireDate = new DateTime(2025, 7, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(4641),
                            LastName = "Johnson",
                            Phone = "555-0202"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000203"),
                            DepartmentId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "michael.brown@university.edu",
                            FirstName = "Michael",
                            HireDate = new DateTime(2025, 7, 14, 23, 34, 48, 298, DateTimeKind.Utc).AddTicks(4643),
                            LastName = "Brown",
                            Phone = "555-0203"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.DepartmentCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.StudentCourse", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("DepartmentCourses");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("DepartmentCourses");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
